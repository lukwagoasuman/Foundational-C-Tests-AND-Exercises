
/*
Examine compiler-generated exceptions
200 XP

    10 minutes

Exceptions are generated by the .NET runtime or by code in a program. The exception type is dependent on the code that causes the exception.
Compiler-generated exceptions

The .NET runtime throws exceptions when basic operations fail. Here's a short list of runtime exceptions and their error conditions:

    ArrayTypeMismatchException: Thrown when an array can't store a given element because the actual type of the element is incompatible with the actual type of the array.
    DivideByZeroException: Thrown when an attempt is made to divide an integral value by zero.
    FormatException: Thrown when the format of an argument is invalid.
    IndexOutOfRangeException: Thrown when an attempt is made to index an array when the index is less than zero or outside the bounds of the array.
    InvalidCastException: Thrown when an explicit conversion from a base type to an interface or to a derived type fails at runtime.
    NullReferenceException: Thrown when an attempt is made to reference an object whose value is null.
    OverflowException: Thrown when an arithmetic operation in a checked context overflows.

Code samples for compiler-generated exceptions

The following code samples show an example of the code that causes a compiler-generated exception.
ArrayTypeMismatchException
*/ 

// An exception of type ArrayTypeMismatchException is thrown when an attempt is made to store an element of the wrong type within an array. The following example throws an ArrayTypeMismatchException exception when trying to store a numeric value in a string array.C#

string[] names = { "Dog", "Cat", "Fish" };
Object[] objs = (Object[])names;

Object obj = (Object)13;
objs[2] = obj; // ArrayTypeMismatchException occurs

/*
DivideByZeroException

An exception of type DivideByZeroException occurs when trying to divide an integer or Decimal number by zero. The following example throws a DivideByZeroException exception when performing integer division.
C#
*/
int number1 = 3000;
int number2 = 0;
Console.WriteLine(number1 / number2); // DivideByZeroException occurs

/*
Note

Dividing a floating-point value by zero doesn't throw an exception; it results in positive infinity, negative infinity, or not a number (NaN), according to the rules of IEEE 754 arithmetic.
FormatException

An exception of type FormatException occurs when the format of an argument is invalid, or when a composite format string is not well formed. The following example throws a FormatException exception when trying to convert a string to an integer.
C#
*/
int valueEntered;
string userValue = "two";
valueEntered = int.Parse(userValue); // FormatException occurs

// IndexOutOfRangeException

//An exception of type IndexOutOfRangeException is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds. The following example throws an IndexOutOfRangeException exception when attempting to assign the last element of the values1 array to the last element of the values2 array.C#


int[] values1 = { 3, 6, 9, 12, 15, 18, 21 };
int[] values2 = new int[6];

values2[values1.Length - 1] = values1[values1.Length - 1]; // IndexOutOfRangeException occurs

//InvalidCastException

//An exception of type InvalidCastException is thrown when attempting an invalid casting or explicit conversion. The following example throws an InvalidCastException when attempting to cast an object of type string to an int variable.C#


object obj = "This is a string";
int num = (int)obj;

//NullReferenceException

//An exception of type NullReferenceException is thrown when attempting to access a member on a type whose value is null. Two examples are shown. In the first example, a NullReferenceException is thrown when attempting to access an element of a null array. The second example throws a NullReferenceException when attempting to access a method of a null string.C#


int[] values = null;
for (int i = 0; i <= 9; i++)
    values[i] = i * 2;

//C#

string? lowCaseString = null;
Console.WriteLine(lowCaseString.ToUpper());

//OverflowException

//An exception of type OverflowException occurs when an arithmetic operation attempts to assign a result that's outside the range of the target data type. The following example throws an OverflowException exception when attempting to convert a decimal value of 400 to a byte variable.C#


decimal x = 400;
byte i;

i = (byte)x; // OverflowException occurs
Console.WriteLine(i);

/*
Recap

Here are a few important things to remember from this unit:

    The .NET runtime throws an exception when an operation fails.
    The exception type is dependent on the code that causes the exception.
    Your application should catch runtime exceptions.
*/

/*
Recap

Here are a few important things to remember from this unit:

    Implement a try-catch pattern to try specified code lines within your application and catch exceptions that occur within the scope of the try code block.
    Use a catch clause to catch an exception thrown at the same level of the call stack.
    Use a catch clause to catch an exception thrown at a higher level of the call stack.
*/

try
{
    Process1();
}
catch
{
    Console.WriteLine("An exception has occurred");
}

Console.WriteLine("Exit program");

static void Process1()
{
    try
    {
        WriteMessage();
    }
    catch
    {
        Console.WriteLine("Exception caught in Process1");
    }

}

static void WriteMessage()
{
    double float1 = 3000.0;
    double float2 = 0.0;
    int number1 = 3000;
    int number2 = 0;

    Console.WriteLine(float1 / float2);
    Console.WriteLine(number1 / number2);
}


// Exercise - Complete a challenge activity to catch specific exceptions

try
{
    int num1 = int.MaxValue;
    int num2 = int.MaxValue;
    int result = num1 + num2;
    Console.WriteLine("Result: " + result);

    string str = null;
    int length = str.Length;
    Console.WriteLine("String Length: " + length);

    int[] numbers = new int[5];
    numbers[5] = 10;
    Console.WriteLine("Number at index 5: " + numbers[5]);

    int num3 = 10;
    int num4 = 0;
    int result2 = num3 / num4;
    Console.WriteLine("Result: " + result2);
}
catch (OverflowException ex)
{
    Console.WriteLine("Error: The number is too large to be represented as an integer." + ex.Message);
}
catch (NullReferenceException ex)
{
    Console.WriteLine("Error: The reference is null." + ex.Message);
}
catch (IndexOutOfRangeException ex)
{
    Console.WriteLine("Error: Index out of range." + ex.Message);
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Error: Cannot divide by zero." + ex.Message);
}

Console.WriteLine("Exiting program.");

// Review the solution for the catch specific exceptions challenge

checked
{
    try
    {
        int num1 = int.MaxValue;
        int num2 = int.MaxValue;
        int result = num1 + num2;
        Console.WriteLine("Result: " + result);
    }
    catch (OverflowException ex)
    {
        Console.WriteLine("Error: The number is too large to be represented as an integer. " + ex.Message);
    }
}

try
{
    string? str = null;
    int length = str.Length;
    Console.WriteLine("String Length: " + length);
}
catch (NullReferenceException ex)
{
    Console.WriteLine("Error: The reference is null. " + ex.Message);
}

try
{
    int[] numbers = new int[5];
    numbers[5] = 10;
    Console.WriteLine("Number at index 5: " + numbers[5]);
}
catch (IndexOutOfRangeException ex)
{
    Console.WriteLine("Error: Index out of range. " + ex.Message);
}

try
{
    int num3 = 10;
    int num4 = 0;
    int result2 = num3 / num4;
    Console.WriteLine("Result: " + result2);
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Error: Cannot divide by zero. " + ex.Message);
}

Console.WriteLine("Exiting program.");

